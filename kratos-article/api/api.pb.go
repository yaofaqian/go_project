// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArticleReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleReq) Reset()         { *m = ArticleReq{} }
func (m *ArticleReq) String() string { return proto.CompactTextString(m) }
func (*ArticleReq) ProtoMessage()    {}
func (*ArticleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ArticleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReq.Merge(m, src)
}
func (m *ArticleReq) XXX_Size() int {
	return m.Size()
}
func (m *ArticleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReq proto.InternalMessageInfo

type ArticleResp struct {
	ArticleId            int64    `protobuf:"varint,1,opt,name=ArticleId,proto3" json:"article_id"`
	ArticleTitle         string   `protobuf:"bytes,2,opt,name=ArticleTitle,proto3" json:"article_title"`
	ArticleAuthor        string   `protobuf:"bytes,3,opt,name=ArticleAuthor,proto3" json:"article_author"`
	ArticleContent       string   `protobuf:"bytes,4,opt,name=ArticleContent,proto3" json:"article_content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleResp) Reset()         { *m = ArticleResp{} }
func (m *ArticleResp) String() string { return proto.CompactTextString(m) }
func (*ArticleResp) ProtoMessage()    {}
func (*ArticleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ArticleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleResp.Merge(m, src)
}
func (m *ArticleResp) XXX_Size() int {
	return m.Size()
}
func (m *ArticleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleResp.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ArticleReq)(nil), "article.service.v1.ArticleReq")
	proto.RegisterType((*ArticleResp)(nil), "article.service.v1.ArticleResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0x31, 0xa0, 0x4d, 0x78, 0x83, 0x69, 0x9e, 0x34, 0x65, 0xd9, 0x96, 0xb0, 0x9c, 0x38,
	0x6c, 0x46, 0x6c, 0xda, 0x34, 0xb1, 0xc3, 0x04, 0xdb, 0x0e, 0xbb, 0xa1, 0xa8, 0xa7, 0x5e, 0x2a,
	0x93, 0x98, 0xf0, 0xa4, 0x10, 0x87, 0xc4, 0x41, 0xea, 0xe7, 0xe8, 0xa5, 0x1f, 0x89, 0x63, 0x3f,
	0x41, 0xd4, 0xd2, 0x53, 0x73, 0xec, 0x27, 0xa8, 0x70, 0x1c, 0x10, 0xad, 0xda, 0x5b, 0xfe, 0xef,
	0xf7, 0xff, 0xbf, 0x17, 0x3f, 0x1b, 0xb7, 0x58, 0x0c, 0x34, 0x4e, 0x84, 0x14, 0x84, 0xb0, 0x44,
	0x82, 0x17, 0x72, 0x9a, 0xf2, 0x64, 0x05, 0x1e, 0xa7, 0xab, 0x81, 0xf9, 0x25, 0x00, 0x39, 0xcf,
	0xa6, 0xd4, 0x13, 0x8b, 0x7e, 0x20, 0x02, 0xd1, 0x57, 0xd6, 0x69, 0x36, 0x53, 0x4a, 0x09, 0xf5,
	0x55, 0xb6, 0x30, 0xdf, 0x07, 0x42, 0x04, 0x21, 0xdf, 0xbb, 0xf8, 0x22, 0x96, 0xa7, 0x1a, 0x7e,
	0xd0, 0x90, 0xc5, 0xd0, 0x67, 0x51, 0x24, 0x24, 0x93, 0x20, 0xa2, 0xb4, 0xa4, 0xce, 0x6f, 0x8c,
	0x47, 0xe5, 0x7c, 0x97, 0x2f, 0xc9, 0x00, 0xd7, 0xc1, 0x37, 0x50, 0x17, 0xf5, 0x1a, 0xe3, 0x4f,
	0xb7, 0xb9, 0xfd, 0x71, 0x26, 0x92, 0xc5, 0xd0, 0x01, 0xdf, 0xe9, 0xae, 0x58, 0x08, 0x3e, 0x93,
	0x7c, 0xe8, 0x24, 0x7c, 0x99, 0x41, 0xc2, 0x7d, 0xc7, 0xad, 0x83, 0xef, 0xdc, 0x20, 0xfc, 0x62,
	0xd7, 0x21, 0x8d, 0xc9, 0x67, 0xdc, 0xd2, 0xf2, 0x7f, 0xd5, 0xa9, 0x53, 0xe4, 0x36, 0xd6, 0xa7,
	0x3c, 0x01, 0xdf, 0xdd, 0x1b, 0xc8, 0x77, 0xfc, 0x52, 0x8b, 0x23, 0x90, 0x21, 0x37, 0xea, 0x5d,
	0xd4, 0x6b, 0x8d, 0x5f, 0x17, 0xb9, 0xdd, 0xae, 0x02, 0x72, 0x0b, 0xdc, 0x03, 0x1b, 0xf9, 0x89,
	0xdb, 0x5a, 0x8f, 0x32, 0x39, 0x17, 0x89, 0xd1, 0x50, 0x39, 0x52, 0xe4, 0x76, 0xa7, 0xca, 0x31,
	0x45, 0xdc, 0x43, 0x23, 0xf9, 0x85, 0x3b, 0xba, 0xf0, 0x47, 0x44, 0x92, 0x47, 0xd2, 0x68, 0xaa,
	0xe8, 0x9b, 0x22, 0xb7, 0x5f, 0x55, 0x51, 0xaf, 0x44, 0xee, 0x3d, 0xeb, 0xd7, 0x33, 0x84, 0x9f,
	0xeb, 0x12, 0xf9, 0x81, 0x9b, 0x13, 0x88, 0x02, 0xf2, 0x96, 0x96, 0xfb, 0xa5, 0xd5, 0xf2, 0xe9,
	0xbf, 0xed, 0xf2, 0xcd, 0x47, 0xea, 0x64, 0xb2, 0xfb, 0xf5, 0xbf, 0x5c, 0x32, 0x08, 0x89, 0x45,
	0x1f, 0x3e, 0x00, 0xba, 0xbf, 0x13, 0xd3, 0x7e, 0x92, 0xa7, 0xf1, 0xf8, 0xdd, 0xfa, 0xca, 0xaa,
	0xad, 0x37, 0x16, 0xba, 0xd8, 0x58, 0xe8, 0x72, 0x63, 0xa1, 0xf3, 0x6b, 0xab, 0x76, 0xdc, 0x60,
	0x31, 0x4c, 0x9f, 0xa9, 0xe1, 0xdf, 0xee, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xf1, 0x14, 0x95,
	0x6f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ArticleDetail(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*ArticleResp, error)
}

type articleClient struct {
	cc *grpc.ClientConn
}

func NewArticleClient(cc *grpc.ClientConn) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/article.service.v1.Article/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleDetail(ctx context.Context, in *ArticleReq, opts ...grpc.CallOption) (*ArticleResp, error) {
	out := new(ArticleResp)
	err := c.cc.Invoke(ctx, "/article.service.v1.Article/ArticleDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
type ArticleServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ArticleDetail(context.Context, *ArticleReq) (*ArticleResp, error)
}

// UnimplementedArticleServer can be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (*UnimplementedArticleServer) Ping(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedArticleServer) ArticleDetail(ctx context.Context, req *ArticleReq) (*ArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDetail not implemented")
}

func RegisterArticleServer(s *grpc.Server, srv ArticleServer) {
	s.RegisterService(&_Article_serviceDesc, srv)
}

func _Article_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.service.v1.Article/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.service.v1.Article/ArticleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleDetail(ctx, req.(*ArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Article_serviceDesc = grpc.ServiceDesc{
	ServiceName: "article.service.v1.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Article_Ping_Handler,
		},
		{
			MethodName: "ArticleDetail",
			Handler:    _Article_ArticleDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ArticleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArticleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArticleContent) > 0 {
		i -= len(m.ArticleContent)
		copy(dAtA[i:], m.ArticleContent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArticleContent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ArticleAuthor) > 0 {
		i -= len(m.ArticleAuthor)
		copy(dAtA[i:], m.ArticleAuthor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArticleAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArticleTitle) > 0 {
		i -= len(m.ArticleTitle)
		copy(dAtA[i:], m.ArticleTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ArticleTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.ArticleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArticleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArticleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArticleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArticleId != 0 {
		n += 1 + sovApi(uint64(m.ArticleId))
	}
	l = len(m.ArticleTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArticleAuthor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ArticleContent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArticleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArticleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleId", wireType)
			}
			m.ArticleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArticleTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArticleAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArticleContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
